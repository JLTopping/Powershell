Function Set-BT {
    [CmdletBinding()] 
    Param (
    [Parameter(Mandatory=$true)][ValidateSet('Off', 'On')][string]$BluetoothStatus
    )

    #Make Sure Bluetooth Service is Running
    If ((Get-Service bthserv).Status -eq 'Stopped') {Start-Service bthserv}
    
    #Only Grab the First Returned Object of the Specified Parameters
    Add-Type -AssemblyName System.Runtime.WindowsRuntime
    $AsTaskGeneric = ([System.WindowsRuntimeSystemExtensions].GetMethods() | ? { $_.Name -eq 'AsTask' -and $_.GetParameters().Count -eq 1 -and $_.GetParameters()[0].ParameterType.Name -eq 'IAsyncOperation`1' })[0]
    
    #Set Status of Task
    Function Await($WinRtTask, $ResultType) {
        $AsTask = $AsTaskGeneric.MakeGenericMethod($ResultType)
        $netTask = $AsTask.Invoke($null, @($WinRtTask))
        $netTask.Wait(-1) | Out-Null
        $netTask.Result
        }

    #Find Access Status
    [Windows.Devices.Radios.Radio,Windows.System.Devices,ContentType=WindowsRuntime] | Out-Null
    [Windows.Devices.Radios.RadioAccessStatus,Windows.System.Devices,ContentType=WindowsRuntime] | Out-Null
    Await ([Windows.Devices.Radios.Radio]::RequestAccessAsync()) ([Windows.Devices.Radios.RadioAccessStatus]) | Out-Null

    $Radios = Await ([Windows.Devices.Radios.Radio]::GetRadiosAsync()) ([System.Collections.Generic.IReadOnlyList[Windows.Devices.Radios.Radio]])
    $Bluetooth = $Radios | ? {$_.Kind -eq 'Bluetooth'}
    
    #Set BT Status
    [Windows.Devices.Radios.RadioState,Windows.System.Devices,ContentType=WindowsRuntime] | Out-Null
    Await ($bluetooth.SetStateAsync($BluetoothStatus)) ([Windows.Devices.Radios.RadioAccessStatus]) | Out-Null
    }