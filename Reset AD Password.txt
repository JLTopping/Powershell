Function Change-Password {
    #Prompt for User
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing
    
    $form = New-Object System.Windows.Forms.Form
    $form.Text = 'Change AD Password'
    $form.Size = New-Object System.Drawing.Size(300,235)
    $form.StartPosition = 'CenterScreen'
    
    $OKButton = New-Object System.Windows.Forms.Button
    $OKButton.Location = New-Object System.Drawing.Point(65,160)
    $OKButton.Size = New-Object System.Drawing.Size(75,23)
    $OKButton.Text = 'OK'
    $OKButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
    $form.AcceptButton = $OKButton
    $form.Controls.Add($OKButton)
 
    $CancelButton = New-Object System.Windows.Forms.Button
    $CancelButton.Location = New-Object System.Drawing.Point(140,160)
    $CancelButton.Size = New-Object System.Drawing.Size(75,23)
    $CancelButton.Text = 'Cancel'
    $CancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    $form.CancelButton = $CancelButton
    $form.Controls.Add($CancelButton)
    
    $EmployeeIDLabel = New-Object System.Windows.Forms.Label
    $EmployeeIDLabel.Location = New-Object System.Drawing.Point(10,10)
    $EmployeeIDLabel.Size = New-Object System.Drawing.Size(330,20)
    $EmployeeIDLabel.Text = 'Please enter your Employee Number:'
    $form.Controls.Add($EmployeeIDLabel)
   
    $EmployeeIDInput = New-Object System.Windows.Forms.TextBox
    $EmployeeIDInput.Location = New-Object System.Drawing.Point(10,30)
    $EmployeeIDInput.Size = New-Object System.Drawing.Size(260,20)
    $form.Controls.Add($EmployeeIDInput)
    
    $NewPasswordLabel = New-Object System.Windows.Forms.Label
    $NewPasswordLabel.Location = New-Object System.Drawing.Point(10,70)
    $NewPasswordLabel.Size = New-Object System.Drawing.Size(330,20)
    $NewPasswordLabel.Text = 'Please enter the new Password:'
    $form.Controls.Add($NewPasswordLabel)
   
    $NewPasswordInput = New-Object System.Windows.Forms.TextBox
    $NewPasswordInput.Location = New-Object System.Drawing.Point(10,90)
    $NewPasswordInput.Size = New-Object System.Drawing.Size(260,20)
    $form.Controls.Add($NewPasswordInput)
 
    $UnlockAccount = New-Object System.Windows.Forms.CheckBox
    $UnlockAccount.UseVisualStyleBackColor = $True
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Width = 75
    $System_Drawing_Size.Height = 30
    $UnlockAccount.Size = $System_Drawing_Size
    $UnlockAccount.TabIndex = 0
    $UnlockAccount.Text = "Unlock Account"
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 20
    $System_Drawing_Point.Y = 120
    $UnlockAccount.Location = $System_Drawing_Point
    $UnlockAccount.DataBindings.DefaultDataSourceUpdateMode = 0
    $UnlockAccount.Name = "Unlock Account"
    $form.Controls.Add($UnlockAccount)
 
    $ChangeAtLogon = New-Object System.Windows.Forms.CheckBox
    $ChangeAtLogon.UseVisualStyleBackColor = $True
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Width = 150
    $System_Drawing_Size.Height = 30
    $ChangeAtLogon.Size = $System_Drawing_Size
    $ChangeAtLogon.TabIndex = 0
    $ChangeAtLogon.Text = "User Needs to Change Password at Next Logon"
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 125
    $System_Drawing_Point.Y = 120
    $ChangeAtLogon.Location = $System_Drawing_Point
    $ChangeAtLogon.DataBindings.DefaultDataSourceUpdateMode = 0
    $ChangeAtLogon.Name = "Change Password At Next Logon"
    $form.Controls.Add($ChangeAtLogon)

    $form.Topmost = $true

    $form.Topmost = $true
 
    $form.Add_Shown({$EmployeeIDLabel.Select()})
    $form.Add_Shown({$NewPasswordLabel.Select()})
    $result = $form.ShowDialog()
 
    if ($result -eq [System.Windows.Forms.DialogResult]::OK) {
        $UserID = $EmployeeIDInput.Text
        $NewPassword = $NewPasswordInput.Text
        $NeedToUnlock = $UnlockAccount.CheckState
        $ChangeAtNextLogon = $ChangeAtLogon.CheckState
        } else {Break}

    #Test If User Exists
    $GAD = Get-ADUser $UserID
    $TF = $?

    #Set New Password if Both Requirements are met
    if (($TF -match "True") -and ($NewPassword.Length -gt 7)) {

        #Execute Processes
        Set-ADAccountPassword $UserID -Reset -NewPassword (ConvertTo-SecureString -AsPlainText "$NewPassword" -Force) -Credential $Cred

        if ($ChangeAtNextLogon -like 'Checked') {Set-ADUser -Identity $UserID -ChangePasswordAtLogon $true; $MessageBody = "The Password has been reset to $NewPassword. Please login to finish resetting the password."}
            else {$MessageBody = "The Password has been reset to $NewPassword."}
        
        if ($NeedToUnlock -like 'Checked') {Unlock-ADAccount $UserID; $MessageBody += "`n`nAccount successfully unlocked."}

        #Success Pop-Up Box
        Add-Type -AssemblyName PresentationCore,PresentationFramework
        $ButtonType = [System.Windows.MessageBoxButton]::OK
        $MessageIcon = [System.Windows.MessageBoxImage]::Information
        $MessageTitle = "Password Reset"
        [System.Windows.MessageBox]::Show($MessageBody,$MessageTitle,$ButtonType,$MessageIcon)
        } else {

        #Error Popup Box
        Add-Type -AssemblyName PresentationCore,PresentationFramework
        $ButtonType = [System.Windows.MessageBoxButton]::YesNo
        $MessageIcon = [System.Windows.MessageBoxImage]::Error
        $MessageBody = "We encountered an error processing that request. Please make sure to enter a valid Employee Number and Password."
        $MessageTitle = "Error"
        
        $Result = [System.Windows.MessageBox]::Show($MessageBody,$MessageTitle,$ButtonType,$MessageIcon)
        if ($Result) {Change-Password}
        }
    }