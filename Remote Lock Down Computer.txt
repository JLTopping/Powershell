#Credit for Set-WINRMListener Function to Unknown Source
Function Set-WINRMListener {
 [cmdletBinding()] 
 Param ( 
         # Enter a ComputerName or IP Address, accepts multiple ComputerNames 
         [Parameter(  
         ValueFromPipeline=$True,  
         ValueFromPipelineByPropertyName=$True, 
         Mandatory=$True, 
         HelpMessage="Enter a ComputerName or IP Address, accepts multiple ComputerNames")]  
         [String[]]$ComputerName, 
         [Parameter( 
         HelpMessage="Enter the IPv4 address range for the WinRM listener")] 
         [String]$IPv4Range = '*', 
         [Parameter( 
         HelpMessage="Enter the IPv4 address range for the WinRM listener")] 
         [String]$IPv6Range = '*' 
     ) 
 Begin { 
         $HKLM = 2147483650 
         $Key = "SOFTWARE\Policies\Microsoft\Windows\WinRM\Service" 
         $DWORDName = "AllowAutoConfig"  
         $DWORDvalue = "0x1" 
         $String1Name = "IPv4Filter" 
         $String2Name = "IPv6Filter" 
     } 
 Process { 
  Foreach ($computer in $ComputerName) { 
   Write-Verbose "Beginning function on $computer" 
   Try { 
     Write-Verbose "Attempting to create remote registry handle" 
     $Reg = New-Object -TypeName System.Management.ManagementClass -ArgumentList \\$computer\Root\default:StdRegProv 
     } Catch { 
     Write-Warning $_.exception.message 
     Write-Warning "The function will abort operations on $Computer" 
     $problem =$true 
     } 
   if (-not($problem)) { 
     Try { 
       Write-Verbose "Attempting to create Remote Key" 
       if (($reg.CreateKey($HKLM, $key)).returnvalue -ne 0) {
         Throw "Failed to create key"
         } 
       } Catch { 
       Write-Warning $_.exception.message 
       Write-Warning "The function will abort operations on $Computer" 
       $problem =$true 
       } 
     } 
   if (-not($problem)) { 
     Try { 
        Write-Verbose "Attemping to set DWORD value" 
        if (($reg.SetDWORDValue($HKLM, $Key, $DWORDName, $DWORDvalue)).ReturnValue -ne 0) {
          Throw "Failed to set DWORD"
          } 
        } Catch { 
        Write-Warning $_.exception.message 
        Write-Warning "The function will abort operations on $Computer" 
        $problem =$true 
        } 
      } 
    if (-not($problem)) { 
      Try { 
        Write-Verbose "Attempting to set first REG_SZ Value" 
        if (($reg.SetStringValue($HKLM, $Key, $String1Name, $IPv4Range)).ReturnValue -ne 0) {
          Throw "Failed to set REG_SZ"
          } 
        } Catch { 
        Write-Warning $_.exception.message 
        Write-Warning "The function will abort operations on $Computer" 
        $problem =$true 
        } 
      } 
    if (-not($problem)) { 
      Try { 
        Write-Verbose "Attempting to set second REG_SZ Value" 
        if (($reg.SetStringValue($HKLM, $Key, $String2Name, $IPv6Range)).ReturnValue -ne 0) {
          Throw "Failed to set REG_SZ"
          } 
        } Catch { 
        Write-Warning $_.exception.message 
        Write-Warning "The function will abort operations on $Computer" 
        $problem =$true 
        } 
      } 
    if ($problem) {
      $problem = $false
      } Else {
      Write-Verbose "Successfully completed operation on $computer"
      } 
    } 
  } 
End {} 
} 

Function RemoteLock-Computer{
    [CmdletBinding()]
    param(
    [ValidateScript({ Test-Connection -ComputerName $_ -Quiet -Count 1 })][ValidateNotNullOrEmpty()][string[]]$ComputerName = $env:COMPUTERNAME
    )

    foreach ($comp in $ComputerName) {
        (Get-WmiObject -Class Win32_OperatingSystem -ComputerName $comp).Win32Shutdown(0)
        }
    }

#Prompt for User Input
$InputComputerName = Read-Host -Prompt "Enter Computer Name"

#Test Connection to Computer
$TCICN = Test-Connection -ComputerName $InputComputerName

if ($TCICN) {

    #Set Computer to Allow Remote Access to Followup Command
    Set-WINRMListener -ComputerName $InputComputerName
    RemoteLock-Computer -ComputerName $InputComputerName
    } else {

    #Could Not Connect Error Message
    Add-Type -AssemblyName PresentationCore,PresentationFramework
    $ButtonType = [System.Windows.MessageBoxButton]::OK
    $MessageIcon = [System.Windows.MessageBoxImage]::Error
    $MessageBody = "We couldn't connect to that computer."
    $MessageTitle = "Error"
    $Result = [System.Windows.MessageBox]::Show($MessageBody,$MessageTitle,$ButtonType,$MessageIcon)
    }